@Override
public void visit(Insert insert) {
	// TODO Auto-generated method stub
	super.visit(insert);
	/*
	 * tables.put(getTableAliasName(insert.getTable()),
	 * insert.getTable().getName()); if (insert.getItemsList() != null) {
	 * insert.getItemsList().accept(this); } if (insert.getSelect() != null) {
	 * visit(insert.getSelect()); }
	 */
}

@Override
public void visit(Update update) {
	// TODO Auto-generated method stub
	super.visit(update);
	/*
	 * for (Table table : update.getTables()) { tables.put(getTableAliasName(table),
	 * table.getName()); } if (update.getExpressions() != null) { for (Expression
	 * expression : update.getExpressions()) { expression.accept(this); } }
	 * 
	 * if (update.getFromItem() != null) { update.getFromItem().accept(this); }
	 * 
	 * if (update.getJoins() != null) { for (Join join : update.getJoins()) {
	 * join.getRightItem().accept(this); } }
	 * 
	 * if (update.getWhere() != null) { update.getWhere().accept(this); }
	 */
}

@Override
public void visit(Delete delete) {
	// TODO Auto-generated method stub
	super.visit(delete);
	/*
	 * tables.put(getTableAliasName(delete.getTable()),
	 * delete.getTable().getName()); if (delete.getWhere() != null) {
	 * delete.getWhere().accept(this); }
	 */
}

@Override
public void visit(Replace replace) {
	// TODO Auto-generated method stub
	super.visit(replace);
	/*
	 * tables.put(getTableAliasName(replace.getTable()),
	 * replace.getTable().getName()); if (replace.getExpressions() != null) { for
	 * (Expression expression : replace.getExpressions()) { expression.accept(this);
	 * } } if (replace.getItemsList() != null) {
	 * replace.getItemsList().accept(this); }
	 */
}

@Override
public void visit(CreateTable createTable) {
	// TODO Auto-generated method stub
	super.visit(createTable);
	/*
	 * tables.put(getTableAliasName(create.getTable()),
	 * create.getTable().getName()); if (create.getSelect() != null) {
	 * create.getSelect().accept(this); }
	 */
}

@Override
public void visit(Merge merge) {
	// TODO Auto-generated method stub
	super.visit(merge);
	/*
	 * tables.put(getTableAliasName(merge.getTable()), merge.getTable().getName());
	 * if (merge.getUsingTable() != null) { merge.getUsingTable().accept(this); }
	 * else if (merge.getUsingSelect() != null) {
	 * merge.getUsingSelect().accept((FromItemVisitor) this); }
	 */
}